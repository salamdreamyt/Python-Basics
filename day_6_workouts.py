# -*- coding: utf-8 -*-
"""Day 6 workouts.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/106YWk1yzmfe8MCPCb24rEbwIlBye30s1

**Question 1:**
Create a Python list named fruits with the elements 'apple', 'banana', and 'orange'.
**Hints:**
Use square brackets [] to define a list.
Example: fruits = ['apple', 'mango'].
**Algorithm:**
Define a list named fruits with elements 'apple', 'banana', and 'orange'.
**Display the list.**
Sample Output 1:
Fruits list: ['apple', 'banana', 'orange']
P
"""

fruits=["apple","banana","mango"]
print(fruits)

"""Question 2:
Add a new fruit, 'grape', to the existing fruits list.
Hints:
Use the append method to add an element to the end of the list.
Example: fruits.append('mango').
Algorithm:
Use the append method to add 'grape' to the fruits list.
Display the updated list.
Sample Output:
Updated Fruits list: ['apple', 'banana', 'orange', 'grape']
"""

fruits.append("grape")
print(fruits)

"""Question 3:
Remove 'banana' from the fruits list.
Hints:
Use the remove method to remove a specific element.
Example: fruits.remove('mango').

Algorithm:
Use the remove method to remove 'banana' from the fruits list.
Display the updated list.
Sample Output :
Updated Fruits list: ['apple', 'orange', 'grape']
"""

fruits.remove("mango")
print(fruits)

"""Question 4:
Check if 'apple' is present in the fruits list.
Hints:
Use the in keyword for membership testing.
Example: if 'mango' in fruits:.
Algorithm:
Check if 'apple' is present in the fruits list using the in keyword.
Display the result.
Sample Output:
'apple' is present in the list.
"""

if "apple" in fruits:
    print("apple is present in fruits")
else:
    print("apple is not present in furits")

"""Question 5:
Create a new list named numbers with the elements 1, 2, and 3.
Hints:
Use square brackets to define the list.
Algorithm:
Define a list named numbers with elements 1, 2, and 3.
Display the list.
Sample Output:
Numbers list: [1, 2, 3]
"""

numbers=[1,2,3]
print(numbers)

"""Question 6:
Use the extend method to combine the fruits and numbers lists into a single list.
Hints:Use the extend method to append elements from another list.
Example: numbers.extend(fruits).
Algorithm:
Use the extend method to combine the fruits and numbers lists.
Display the combined list.
Sample Output:
Combined list: ['apple', 'orange', 'grape', 1, 2, 3]
"""

fruits.extend(numbers)
print(fruits)

"""Question 7:
Use the index method to find the index of 'orange' in the combined list.
Hints:
index = combined_list.index('mango').
Algorithm:
Use the index method to find the index of 'orange' in the combined list.
Display the index.
Sample Output:
Index of 'orange': 1
"""

fruits.index("mango")

"""Question 8:
Reverse the order of elements in the fruits list using the reverse method.
Hints:
Use the reverse method to reverse the order of elements.
Example: numbers.reverse().
Algorithm:
Use the reverse method to reverse the order of elements in the fruits list.
Display the reversed list.
Sample Output:
Reversed Fruits list: ['grape', 'orange', 'apple']
"""

fruits.reverse()
print(fruits)

"""# Python Tuples
Tuples are immutable, Python tuples are a type of data structure that is very similar to lists.
Question 9:
Create a Python tuple named days with the elements 'Monday', 'Tuesday', and 'Wednesday'.
Hints:
Use parentheses () to define a tuple.
Example: days = ('Monday', 'Tuesday').
Algorithm:
Create a tuple named days with the elements 'Monday', 'Tuesday', and 'Wednesday'.
Display the tuple.
Sample Output:
Days tuple: ('Monday', 'Tuesday', 'Wednesday')
"""

days=('Monday','Tuesday',"Wednesday")
print(days)

"""Question 10:
Access the second element of the days tuple and display it.
Hints:
Use indexing to access elements in a tuple.
Example: third_day = days[2].
Algorithm:
Access the second element of the days tuple.
Display the result.
Sample Output:
Second day: Tuesday
"""

days[1]

"""Tuple Methods
Tuples are immutable sequences of elements that can be used to group related data together.
Question 11:
Count the occurrences of 'Tuesday' in the days tuple using the count method.
Hints:
Use the count method to count occurrences of an element.
Example: count_monday = tuple1.count('monday').
Algorithm:
Use the count method to count occurrences of 'Tuesday' in the days tuple.
Display the result.
Sample Output:
Tuple Methods
keyboard_arrow_down
1/
"""

days.count('Tuesday')

"""Question 12:
Find the index of 'Wednesday' in the days tuple using the index method.
Hints:
Use the index method to find the index of an element.
Example: index_monday = tuple1.index('Monday').
Algorithm:
Use the index method to find the index of 'Wednesday' in the days tuple.
Display the result.
Sample Output:
Index of 'Wednesday': 2
"""

days.index('Wednesday')